import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel, QSpinBox, QPlainTextEdit, QHBoxLayout
from PyQt5.QtCore import Qt
from threading import Thread
import time
import os
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import json
import time
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from threading import Thread
import sys
import requests
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel, QSpinBox, QPlainTextEdit, QHBoxLayout
from PyQt5.QtCore import Qt
import os
import requests
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton
import os
import uuid
import hashlib
import requests
import sys
from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QApplication
from PyQt5.QtCore import Qt
import os
import uuid
import hashlib
import requests
import sys
from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QApplication, QPushButton
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QClipboard  
import sys
import os
import requests
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtCore import Qt, QTimer

class FacebookReportTool(QWidget):
    def __init__(self):
        super().__init__()
        
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Facebook Report Tool")
        self.setGeometry(100, 100, 600, 500)  # TƒÉng k√≠ch th∆∞·ªõc c·ª≠a s·ªï
        self.setStyleSheet("background-color: black; color: white;")

        self.layout = QVBoxLayout()

        # Label for FB link
        self.fb_link_label = QLabel("Nh·∫≠p link Facebook:")
        self.fb_link_label.setStyleSheet("font-size: 16px color: #39FF14;")
        self.layout.addWidget(self.fb_link_label)

        # Input field for Facebook link
        self.fb_link_input = QLineEdit(self)
        self.fb_link_input.setStyleSheet("font-size: 14px; padding: 10px color: #39FF14;")
        self.layout.addWidget(self.fb_link_input)

        # Label for number of reports
        self.num_reports_label = QLabel("Nh·∫≠p s·ªë l·∫ßn b√°o c√°o:")
        self.num_reports_label.setStyleSheet("font-size: 16px color: #39FF14;")
        self.layout.addWidget(self.num_reports_label)

        # Input for number of reports (SpinBox)
        self.num_reports_input = QSpinBox(self)
        self.num_reports_input.setMinimum(1)
        self.num_reports_input.setMaximum(100)
        self.num_reports_input.setStyleSheet("font-size: 14px; padding: 10px color: #39FF14;")
        self.layout.addWidget(self.num_reports_input)

        # Label for number of Chrome instances
        self.num_chrome_label = QLabel("Nh·∫≠p s·ªë l∆∞·ª£ng c·ª≠a s·ªï Chrome:")
        self.num_chrome_label.setStyleSheet("font-size: 16px color: #39FF14;")
        self.layout.addWidget(self.num_chrome_label)

        # Input for number of Chrome instances (SpinBox)
        self.num_chrome_input = QSpinBox(self)
        self.num_chrome_input.setMinimum(1)
        self.num_chrome_input.setMaximum(10)
        self.num_chrome_input.setStyleSheet("font-size: 14px; padding: 10px color: #39FF14;")
        self.layout.addWidget(self.num_chrome_input)

        # Buttons Layout
        buttons_layout = QHBoxLayout()

        # Button to continue (show after input)
        self.continue_button = QPushButton("Ti·∫øp t·ª•c", self)
        self.continue_button.setStyleSheet("font-size: 16px; padding: 10px color: #39FF14;")
        self.continue_button.clicked.connect(self.start_chrome_instance)
        buttons_layout.addWidget(self.continue_button)
        # Button to check (show after continue)
        self.check_button = QPushButton("Check", self)
        self.check_button.setStyleSheet("font-size: 16px; padding: 10px color: #39FF14;")
        self.check_button.clicked.connect(self.check_condition)
        self.check_button.setDisabled(True)  # Disable initially
        buttons_layout.addWidget(self.check_button)
        # Button to start reporting (show after check)
        self.start_button = QPushButton("B·∫Øt ƒë·∫ßu b√°o c√°o", self)
        self.start_button.setStyleSheet("font-size: 16px; padding: 10px color: #39FF14;")
        self.start_button.clicked.connect(self.start_reporting)
        self.start_button.setDisabled(True)  # Disable initially
        buttons_layout.addWidget(self.start_button)

        self.layout.addLayout(buttons_layout)

        # Log area (for displaying logs)
        self.log_area = QPlainTextEdit(self)
        self.log_area.setReadOnly(True)
        self.log_area.setStyleSheet("font-size: 14px; padding: 10px;")
        self.layout.addWidget(self.log_area)

        self.setLayout(self.layout)

        self.driver = None  # To store the webdriver instance
        self.chrome_tabs = []  # To store opened tabs (Chrome windows)

    def start_chrome_instance(self):
        fb_link = self.fb_link_input.text()
        num_reports = self.num_reports_input.value()
        num_chrome_instances = self.num_chrome_input.value()

        # Kh·ªüi ƒë·ªông c·ª≠a s·ªï Chrome
        self.log_area.appendPlainText("üîë ƒêang kh·ªüi ƒë·ªông tr√¨nh duy·ªát Chrome...")

        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--disable-infobars")
        chrome_options.add_argument("--disable-popup-blocking")

        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        # M·ªü Facebook ƒë·ªÉ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
        self.driver.get("https://www.facebook.com")
        self.log_area.appendPlainText("üìù Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o Facebook trong tr√¨nh duy·ªát Chrome v√† sau ƒë√≥ nh·∫•n 'Check'.")

        # Sau khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p, b·∫•m Check ƒë·ªÉ ki·ªÉm tra
        self.check_button.setEnabled(True)
        self.continue_button.setDisabled(True)  # Disable continue button after clicking

    def check_condition(self):
        fb_link = self.fb_link_input.text()
        num_reports = self.num_reports_input.value()
        num_chrome_instances = self.num_chrome_input.value()

        # Ki·ªÉm tra xem c√°c th√¥ng tin ƒë√£ h·ª£p l·ªá ch∆∞a
        if fb_link and num_reports > 0 and num_chrome_instances > 0:
            self.log_area.appendPlainText("‚úÖ Ki·ªÉm tra th√†nh c√¥ng. C√≥ th·ªÉ b·∫Øt ƒë·∫ßu.")
            self.start_button.setEnabled(True)  # Enable start button after check
        else:
            self.log_area.appendPlainText("‚ùå Ki·ªÉm tra kh√¥ng th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c th√¥ng tin.")
            self.check_button.setEnabled(False)  # Disable check button if there's an issue

    def start_reporting(self):
        fb_link = self.fb_link_input.text()
        num_reports = self.num_reports_input.value()
        num_chrome_instances = self.num_chrome_input.value()

        # Gi·ªØ l·∫°i c√°c tab Chrome ƒëang m·ªü
        self.chrome_tabs = [self.driver]  # D√πng driver ƒë√£ m·ªü tr∆∞·ªõc ƒë√≥
        self.driver.get(fb_link)  # M·ªü link Facebook mu·ªën b√°o c√°o
        time.sleep(10)
        # L·∫∑p qua c√°c tab (c·ª≠a s·ªï) ƒë√£ m·ªü
        for i in range(num_chrome_instances):
            for j in range(num_reports):
                self.log_area.appendPlainText(f"\nüìå ƒêang th·ª±c hi·ªán b√°o c√°o l·∫ßn {j + 1}...")
                self.try_report1(self.driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath)
                self.try_report5(self.driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath)
                self.try_report2(self.driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath)
                self.try_report3(self.driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath)
                self.try_report4(self.driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath)

        self.log_area.appendPlainText("‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c b√°o c√°o!")

    def try_report1(self, driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 3 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Something about this profile"
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Pretending to be someone"
            try:
                pretending_to_be_someone_button = driver.find_element(By.XPATH, "//span[text()='Pretending to be someone']")
                pretending_to_be_someone_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn "Me"
            try:
                me_button = driver.find_element(By.XPATH, "//span[text()='Me']")
                me_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Submit"
            try:
                submit_button = driver.find_element(By.XPATH, submit_button_xpath)
                submit_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Done"
            try:
                done_button = driver.find_element(By.XPATH, done_button_xpath)
                done_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            self.log_area.appendPlainText("‚úÖ ƒê√£ b√°o c√°o t√†i kho·∫£n m·∫°o danh th√†nh c√¥ng!")

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán b√°o c√°o: {e}")
            pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c



    def try_report2(self,driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 3 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Something about this profile"
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Pretending to be someone"
            try:
                pretending_to_be_someone_button = driver.find_element(By.XPATH, "//span[text()='Pretending to be someone']")
                pretending_to_be_someone_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn "Celebrity"
            try:
                me_button = driver.find_element(By.XPATH, "//span[text()='Celebrity']")
                me_button.click()
                time.sleep(3)
            except Exception as e:
                print(f"‚ùå L·ªói khi ch·ªçn 'Celebrity': {e}")
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

        # Nh·∫≠p t√™n "Mark Zuckerberg" v√†o √¥ t√¨m ki·∫øm
            try:
                search_input = driver.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div[4]/div/div[2]/div/div/div/div/div/div/div/div/div/label/div/input")
                search_input.send_keys("Mark Zuckerberg")
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn k·∫øt qu·∫£ "Mark Zuckerberg"
            try:
                result = driver.find_element(By.XPATH, "//*[@id='4']/div/div[1]/div[2]/div")
                result.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
            # Nh·∫•n "Submit"
            try:
                submit_button = driver.find_element(By.XPATH, submit_button_xpath)
                submit_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Done"
            try:
                done_button = driver.find_element(By.XPATH, done_button_xpath)
                done_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            self.log_area.appendPlainText("‚úÖ ƒê√£ b√°o c√°o t√†i kho·∫£n m·∫°o danh Mark Zuckerburg th√†nh c√¥ng!")

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán b√°o c√°o: {e}")
            pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

    def try_report1(self, driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 3 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Something about this profile"
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Pretending to be someone"
            try:
                pretending_to_be_someone_button = driver.find_element(By.XPATH, "//span[text()='Pretending to be someone']")
                pretending_to_be_someone_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn "Me"
            try:
                me_button = driver.find_element(By.XPATH, "//span[text()='Me']")
                me_button.click()
                time.sleep(3)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Submit"
            try:
                submit_button = driver.find_element(By.XPATH, submit_button_xpath)
                submit_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(5)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Done"
            try:
                done_button = driver.find_element(By.XPATH, done_button_xpath)
                done_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            self.log_area.appendPlainText("‚úÖ ƒê√£ b√°o c√°o t√†i kho·∫£n m·∫°o danh th√†nh c√¥ng!")

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán b√°o c√°o: {e}")
            pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

    def try_report3(self, driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 2 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(2)
            except Exception as e:
                pass  
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(2)
            except Exception as e:
                pass  
            
            # Click v√†o fake name m√† kh√¥ng ƒë·ª£i
            fakename_button_xpath = "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div[4]/div/div[2]/div/div/div/div[3]/div/div/div/div[1]/div"
            try:
                fakename_button = driver.find_element(By.XPATH, fakename_button_xpath)
                fakename_button.click()
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå L·ªói khi ch·ªçn fake name: {e}")
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
    
            # Nh·∫•n "Done"
            try:
                done_button = driver.find_element(By.XPATH, done_button_xpath)
                done_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            self.log_area.appendPlainText("‚úÖ ƒê√£ b√°o c√°o t√†i kho·∫£n m·∫°o danh t√™n th√†nh c√¥ng!")

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán b√°o c√°o: {e}")
            pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

    def try_report4(self, driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 2 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå L·ªói khi nh·∫•n v√†o d·∫•u 2 ch·∫•m: {e}")
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå L·ªói khi nh·∫•n 'Report profile': {e}")
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Something about this profile"
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(2)
            except Exception as e:
                pass  
            
            # Click v√†o fake name m√† kh√¥ng ƒë·ª£i
            fake_account_button_xpath = "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div[4]/div/div[2]/div/div/div/div[2]/div/div/div/div[1]/div"
            try:
                fake_account_button = driver.find_element(By.XPATH, fake_account_button_xpath)
                fake_account_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
        except Exception as e:
            pass  
    def try_report5(self, driver, three_dot_button_xpath, report_button_xpath, reason_button_xpath, submit_button_xpath, next_button_xpath, done_button_xpath):
        try:
            # Nh·∫•n v√†o d·∫•u 3 ch·∫•m
            try:
                three_dot_button = driver.find_element(By.XPATH, three_dot_button_xpath)
                three_dot_button.click()
                time.sleep(1)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Report profile"
            try:
                report_button = driver.find_element(By.XPATH, report_button_xpath)
                report_button.click()
                time.sleep(1)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Something about this profile"
            try:
                reason_button = driver.find_element(By.XPATH, reason_button_xpath)
                reason_button.click()
                time.sleep(1)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Ch·ªçn l√Ω do "Pretending to be someone"
            try:
                pretending_to_be_someone_button = driver.find_element(By.XPATH, "//span[text()='Pretending to be someone']")
                pretending_to_be_someone_button.click()
                time.sleep(1)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            try:
                result = driver.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div[4]/div/div[2]/div/div/div/div[4]/div/div/div/div[1]/div")
                result.click()
                time.sleep(2)
            except Exception as e:
                pass 

            try:
                search_input = driver.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div[4]/div/div[2]/div/div/div/div/div/div/div/div/div/label/div/input")
                search_input.send_keys("Meta")
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            try:
                result = driver.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[2]/div/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/ul/li[1]/div/div[1]")
                result.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c
            # Nh·∫•n "Submit"
            try:
                submit_button = driver.find_element(By.XPATH, submit_button_xpath)
                submit_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Next"
            try:
                next_button = driver.find_element(By.XPATH, next_button_xpath)
                next_button.click()
                time.sleep(2)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            # Nh·∫•n "Done"
            try:
                done_button = driver.find_element(By.XPATH, done_button_xpath)
                done_button.click()
                time.sleep(1)
            except Exception as e:
                pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

            self.log_area.appendPlainText("‚úÖ ƒê√£ b√°o c√°o t√†i kho·∫£n m·∫°o danh th√†nh c√¥ng!")


        except Exception as e:
            self.log_area.appendPlainText("L·ªói khi b√°o c√°o t√†i kho·∫£n m·∫°o danh Meta!")
            pass  # B·ªè qua l·ªói v√† ti·∫øp t·ª•c

# X·ª≠ l√Ω c√°c XPATH
three_dot_button_xpath = "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div/div/div[3]/div/div/div/div[2]/div/div/div"
report_button_xpath = "//span[text()='Report profile']"
reason_button_xpath = "//span[text()='Something about this profile']"
submit_button_xpath = "//span[text()='Submit']"
next_button_xpath = "//span[text()='Next']"
done_button_xpath = "//span[text()='Done']"

class CheckKEY(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üîê Ki·ªÉm tra b·∫£n quy·ªÅn")
        self.setGeometry(500, 300, 450, 200)

        self.layout = QVBoxLayout()

        self.status_label = QLabel("üîÑ ƒêang m·ªü tool...", self)
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("font-size: 16px; color: orange;")
        self.layout.addWidget(self.status_label)

        self.setLayout(self.layout)
        self.show()

        QTimer.singleShot(1000, self.open_main_tool)

    def open_main_tool(self):
        """M·ªü tool ch√≠nh"""
        self.close()  # 
        self.main_window = FacebookReportTool() 
        self.main_window.show() 


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CheckKEY()
    app.exec_()  

